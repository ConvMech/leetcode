	1 sort:
	
	struct f {
		bool operator()(int &a, int& b) {
			return a < b;  # 升序
			// return a > b; # 降序
		}
	};

	sort(a.begin(),a.end(),f())

2. unordered_map:

	时间复杂度， 插入 O（1）， 查找 O（1）
	initialization: 
		unordered_map<char,int> mymap;

	push:
		mymap['a'] = 1;

	visit:
		int val = mymap['a'];
		//并且没有的key不可以这么做

	find:
		mymap.count(key)
		//会返回 true 或者 false;

	第二种find:
		mymap.find(key) != mymap.end();
		// 如果是true的话，说明有key，否则没有key，只有做了以上的find检查之后才能用visit()

	take all:
		for (auto m:mymap){
			char key = m.first;
			int val = m.second;
		}

		auto it = mymap.begin();
		while (it != mymap.end()){
			cout<< it->first <<endl; //key
			cout<< it->second <<endl;	// value
			it ++:
		}

	去除：

		mymap.erase(int key);

3. map:

	map 按照key升序排列。时间复杂度，插入 O（logn），查找 O（logn）
	initialization: 
		map<char,int> mymap;

	push:
		mymap['a'] = 1;

	visit:
		int val = mymap['a'];
		//并且没有的key不可以这么做

	find:
		mymap.count(key)
		//会返回 true 或者 false;

	第二种find:
		mymap.find(key) != mymap.end();
		// 如果是true的话，说明有key，否则没有key，只有做了以上的find检查之后才能用visit()

	take all:
		for (auto m:mymap){
			char key = m.first;
			int val = m.second;
		}
	
4. unordered_set:
	
	时间复杂度 插入 O（1）， 查找 O（1）

	initizalization:
		unordered_set<int> myset;

	push:
		myset.insert(int key);

	find:
		myset.count(int key);

	第二种find:
		myset.find(int key) != myset.end();

	take all:
		for(auto s: myset){
			int key = s;
		}

	erase:
		myset.erase();

5. set:
	
	时间复杂度 插入 O（logn）， 查找 O（n）

	initizalization:
		set<int> myset;

	push:
		myset.insert(int key);

	find:
		myset.count(int key);

	第二种find:
		myset.find(int key) != myset.end();

	take all:
		for(auto s: myset){
			int key = s;
		}


6. string:
	
	reverse:
		reverse(s.begin(), s.end());

7. set => vector:

	vector<int> v(s.begin(),s.end())

8. queue:

	initialization:
		queue<int> myq;
	
	check empty:
		myq.empty();

	push:
		myq.push(int key);

	check front:
		int val = myq.front();

	pop:
		myq.pop();

	size():
		myq.size();

9. priority_queue:
	
	时间复杂度

		push，pop 都是log k k是目前的size

	initialization:
		method 1:
			priority_queue<int> myq;
			// 最大的在前面，剩下的杂乱
			// 默认最小的push往后push

		method 2:
			priority_queue<int,vector<int>,greater<int> > myq;
			// 最小的在前面，剩下杂乱

		method 3:

			eg1:

			priority_queue<int,vector<int>,f> myq;
			struct f{
				bool operator()(int& a, int& b){
					return a > b; // 和sort是反的，是最小的在前面
					// 同时f没有括号
					// 也是可以理解的，相当于greater，越大越往后push
				}
			};

			eg2:
			priority_queue<pair<int,int>,vector<pair<int,int>,f> myq;

			// 如果是pair的话，默认按照pair的first，最大在前面

	check empty:
		myq.empty();

	push:
		myq.push(int key);

	front:
		int val = myq.top();

	pop:
		myq.pop();

	size:
		int size = myq.size();


10. stack:
	
	时间复杂度。 全部O（1）

	1. stack<int> mystack;

	2. empty()
		mystack.empty();

	3. size:
		mystack.size();

	4. push();
		mystack.push();

	5. top:
		mystack.top();

	6. pop:
		mystack.pop();

11. linklist:
	
	双链表: begin指向第一个值，end指向最后的NULL

	1. initialization:

		list<int> mylist;

	2. size:

		mylist.size();

	3. 插入新的值：

		mylist.push_back();

	4. 指针的方法：

		list<int>::iterator it;
		it = mylist.begin();

		cout<< (*it) <<endl;

		it ++;

		while(it != mylist.end()){
			cout<<(*it)<<endl;
			it++;
		}

	5. 去除：

		mylist.erase(it);

		mylist.pop_back();

	6. 访问尾

		it = (--mylist.end());

	7. 从头插入：

		mylist.push_front();

	8. 任意插入：

		it = mylist.begin();

		原来的链表：  1,2,3,4,5

		mylist.insert(it,10);

		链表变成  : 10,1,2,3,4,5



